---
title: "model_playground"
author: "Christoper Chan"
date: "March 7, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Model key:

* report = model parameters used in the report
* test1 = ts(frequency=96)
* test2 = df(lag=96), ts(f=96)
* test3 = adjusted K parameters


```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(gridExtra)
library(here)
library(zoo)
library(tseries)
library(forecast)
```

Reading in a logger dataset that I've been using for testing.
```{r, results='hide', message=FALSE}
here()
lv <- read_csv('180301 Level Data copy.csv')

lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
```

Running the model present in the report. Running the LB test shows that residuals are serially correlated. HOWEVER, because the model is a ARMA test, caution should be used. Some suggest not using a LB test when running against a AR [model](https://stats.stackexchange.com/questions/148004/testing-for-autocorrelation-ljung-box-versus-breusch-godfrey)
```{r}
report <- msts(lv$level_m, seasonal.periods=c(96,35064))

report_model <- auto.arima(report, seasonal=FALSE, xreg=fourier(report, K=c(4,1)))
plot(forecast(report_model, h=192, xreg=fourier(report, K=c(4,1), h=192)))

checkresiduals(report_model, lag=96)
```

The p-value for LB < 0.05, reject $H_0$ and accept that the data is non-random.
```{r}
test1 <- ts(lv$level_m, frequency=96)

test1_model <- auto.arima(test1, seasonal=FALSE, xreg=fourier(test1, K=4))
plot(forecast(test1_model, h=192, xreg=fourier(test1, K=4, h=192)))

checkresiduals(test1_model)
```

```{r}
test2 <- ts(diff(lv$level_m, lag=96), frequency=96)

test2_model <- auto.arima(test2, seasonal=FALSE, xreg=fourier(test2, K=4))
plot(forecast(test2_model, h=192, xreg=fourier(test2, K=4, h=192)))

checkresiduals(test2_model)
```

This searches for the best model. It also satisfies the LB test. K=c(10,2) works best for now.
```{r}
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))


best_fit <- list(model=Inf, aic=Inf, i=Inf, j=Inf)

for (i in 1:10){
    for (j in 1:5){
        fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
        if (fit$aic < best_fit$aic)
            best_fit <- list(model=fit, aicc=fit$aic, i=i, j=j)
        else break;
    }

}


best_fit
plotter <- forecast(best_fit$model, xreg=fourier(test3, K=c(best_fit$i,best_fit$j), h=192))
autoplot(plotter)

checkresiduals(best_fit$model, lag=96)
```



Function for finding arima params
```{r}
arima_param <- function(ts){
    # Performs a grid search for optimal ARIMA parameters by comparing aicc of each model
    # 
    # Return: The model and fourier transform with the lowest aicc
    best_fit <- list(model=Inf, aic=Inf, i=Inf, j=Inf)
    
    for (i in 1:10){
        for (j in 1:5){
            fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
            if (fit$aic < best_fit$aic)
                best_fit <- list(model=fit, aicc=fit$aic, i=i, j=j)
            else break;
        }
    
    }
    return(best_fit)
}
```

