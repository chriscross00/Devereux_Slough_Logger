---
title: "fourier"
author: "Christoper Chan"
date: "March 2, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Fourier Transformation (FT):

* Decomposes a function based on time into the frequencies that make it up.
    * Using the understanding that all waveforms can be drescibed by a sum of sinusoids of different frequencies
        * This implies that the FT is linear, meaning that the transformation of 
* The formula for the FT is as follows: $$f(x) = \int^{\infty}_{-\infty}F(k)e^{2{\pi}ikx}dk$$
* relies on euler's formula: $$e^{i\pi} = -1$$
    * And the more general form that is used in calculations: $$e^{ix} = cos(x) + isin(x)$$


N = number of time samples we have
n = current sample we're considering (0 .. N-1)
xn = value of the signal at time n
k = current frequency we're considering (0 Hertz up to N-1 Hertz)
Xk = amount of frequency k in the signal (amplitude and phase, a complex number)

Reasons for using Fourier Transformation:

* Seasonal versions of ARIMA are not designed to take in periods as long as daily, 96.
    * Instead more for monthly, 12, or quarterly, 4.
    * arima has a seasonal period max of 350, but I saw that I was testing the limits of my 16gb of memory at even 96.
* Instead we'll use the fourier transformation
* Advantages:
    * Can use seasonality of any length
    * Can include multiple seasonalities. In this case we can do daily and annual
* Disadvantage:
    * seasonality is assumed to be fixed
        * In this case it is fine, because the variance among days is stable and seasonality in general is stable.

```{r, message=FALSE, warning=FALSE}
library(forecast)
```

```{r}
n <- 2000
m <- 200
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)


fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
```

```{r}
auto_fit <- auto.arima(y, seasonal=FALSE, xreg=fourier(y, K=4))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
```


```{r}
plot(taylor)
```


