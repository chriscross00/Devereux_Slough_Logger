{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"auto.arima(lv_ts, seasonal = T)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"myarima(x, order = c(results[k, 1], d, results[k, 3]), seasonal = c(results[k, \n    4], D, results[k, 6]), constant = results[k, 7] == 1, ic, \n    trace, approximation = FALSE, xreg = xreg, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"suppressWarnings(fit <- try(stats::arima(x = x, order = order, \n    seasonal = list(order = seasonal, period = m), include.mean = constant, \n    method = method, xreg = xreg, ...), silent = TRUE))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withCallingHandlers(expr, warning = function(w) invokeRestart(\"muffleWarning\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"try(stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...), silent = TRUE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"optim(init[mask], armafn, method = optim.method, hessian = TRUE, \n    control = optim.control, trans = as.logical(transform.pars))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (par) \nfn(par, ...))(c(-0.616925470702576, -0.0295919861722198, 0.307980997634238, \n-0.122751334953383, -0.0256422393185163, 0.0886922290804864, \n0.0527670266475179, -0.00782404204182807))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"fn(par, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(upARIMA(mod, trarma[[1L]], trarma[[2L]]), error = function(e) NULL)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0}],"message":"subscript out of bounds"}