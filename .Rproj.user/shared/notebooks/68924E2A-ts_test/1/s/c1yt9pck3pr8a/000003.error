{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"auto.arima(diff(diff(lv_ts, lag = 96)), approximation = FALSE, \n    trace = FALSE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"myarima(x, order = c(p, d, q), seasonal = c(P, D, Q + 1), constant = constant, \n    ic, trace, approximation, offset = offset, xreg = xreg, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"suppressWarnings(fit <- try(stats::arima(x = x, order = order, \n    seasonal = list(order = seasonal, period = m), include.mean = constant, \n    method = method, xreg = xreg, ...), silent = TRUE))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withCallingHandlers(expr, warning = function(w) invokeRestart(\"muffleWarning\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"try(stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...), silent = TRUE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"optim(init[mask], armafn, method = optim.method, hessian = TRUE, \n    control = optim.control, trans = as.logical(transform.pars))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (par) \nfn(par, ...))(c(-0.592781471666783, -0.186855315841662, 0.147321559592132, \n-0.235727041102907, -0.240833062542541, -0.874082949928642))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"fn(par, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(upARIMA(mod, trarma[[1L]], trarma[[2L]]), error = function(e) NULL)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0}],"message":"Error in optim(init[mask], armafn, method = optim.method, hessian = TRUE,  : \n  non-finite finite-difference value [5]\n"}