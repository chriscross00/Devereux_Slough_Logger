{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"auto.arima(lv_ts, approximation = FALSE, trace = FALSE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"myarima(x, order = c(p + 1, d, q + 1), seasonal = c(P, D, Q), \n    constant = constant, ic, trace, approximation, offset = offset, \n    xreg = xreg, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"suppressWarnings(fit <- try(stats::arima(x = x, order = order, \n    seasonal = list(order = seasonal, period = m), include.mean = constant, \n    method = method, xreg = xreg, ...), silent = TRUE))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withCallingHandlers(expr, warning = function(w) invokeRestart(\"muffleWarning\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"try(stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...), silent = TRUE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"optim(init[mask], armafn, method = optim.method, hessian = TRUE, \n    control = optim.control, trans = as.logical(transform.pars))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (par) \nfn(par, ...))(c(-0.563530937518463, 0.317997190347458, -0.142105112911355, \n-0.562208794364722))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"fn(par, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(upARIMA(mod, trarma[[1L]], trarma[[2L]]), error = function(e) NULL)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0}],"message":"argument \"finally\" is missing, with no default"}