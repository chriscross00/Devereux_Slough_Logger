library(tidyverse)
library(here)
library(forecast)
library(tseries)
here()
lv <- read_csv('data/180301 Level Data.csv')
head(lv, n=5)
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_df <- lv[c(2,5)]
cat('\nAbsolute difference in water level over the period of', as.character(min(lv_df$date_time)), 'and', as.character(min(lv_df$date_time)), 'in meters:', max(lv_df$level_m) - min(lv_df$level_m))
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_df <- lv[c(2,5)]
cat('Absolute difference in water level over the period of', as.character(min(lv_df$date_time)), 'and', as.character(min(lv_df$date_time)), 'in meters:', max(lv_df$level_m) - min(lv_df$level_m))
ggplot(lv_df, aes(date_time, level_m)) +
geom_line() +
geom_smooth(method = 'loess', se = FALSE) +
xlab('Date') +
ylab('Level (m)') +
ggtitle('Water level (m) over time')
decomp_ts <- ts(lv_df$level_m, frequency = 96) %>%
stl(s.window='periodic') %>%
plot(main='Decomposition of level_m')
adf.test(lv_df$level_m, k=96, alternative='stationary')
adf.test(lv_df$level_m, k=97, alternative='stationary')
adf.test(lv_df$level_m, k=96, alternative='stationary')
adf.test(lv_df$level_m, alternative='stationary')
adf.test(lv_df$level_m, k=96, alternative='stationary')
adf.test(lv_df$level_m)
adf.test(lv_df$level_m)
adf.test(lv_df$level_m, k=96, alternative='stationary')
kpss.test(lv_df$level_m)
?adf.test
adf.test(diff(lv_df$level_m, lag=96))
adf.test(diff(lv_df$level_m, lag=96), k=1)
kpss.test
kpss.test(lv_df$level_m, k=96)
kpss.test(lv_df$level_m)
kpss.test(lv_df$level_m, k=96)
head(lf_df)
head(lv_df)
tail(lv)
adf.test(lv$level_m)
# adf.test(lv_df$level_m)
adf.test(lv_df$level_m, k=96, alternative='stationary')
adf.test(lv_df$level_m)
adf.test(diff(lv_df$level_m, lag=96))
adf.test(lv_df$level_m)
?adf.test
JohnsonJohnson
adf.test(lv_df$level_m, k=96, alternative='stationary')
adf.test(lv_df$level_m, k=96)
adf.test(diff(lv_df$level_m, lag=96), k=96)
a <- adf.test(diff(lv_df$level_m, lag=96), k=96)
a$p.value
adf.test(lv_df$level_m, k=96)
adf.test(diff(lv_df$level_m, lag=96), k=96)
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df', lv_adf)
cat('p-value from adf.test() of lv_df', lv_adf$p.value)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value)
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value)
cat('p-value from adf.test() of seasonally differenced lv_df:', lv_diff_adf$p.value)
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value)
cat('\np-value from adf.test() of seasonally differenced lv_df:', lv_diff_adf$p.value)
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value)
cat('\np-value from adf.test() of seasonally differenced lv_df:', lv_diff_adf$p.value)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(zoo)
library(tseries)
library(forecast)
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
?checkresiduals
report <- msts(lv$level_m, seasonal.periods=c(96,35064))
report_model <- auto.arima(report, seasonal=FALSE, xreg=fourier(report, K=c(4,1)))
plot(forecast(report_model, h=192, xreg=fourier(report, K=c(4,1), h=192)))
checkresiduals(report_model, lag=96)
report_model <- auto.arima(report, seasonal=FALSE, xreg=fourier(report, K=c(4,4)))
report <- msts(lv$level_m, seasonal.periods=c(96,35064))
report_model <- auto.arima(report, seasonal=FALSE, xreg=fourier(report, K=c(4,2)))
plot(forecast(report_model, h=192, xreg=fourier(report, K=c(4,2), h=192)))
checkresiduals(report_model, lag=96)
report <- msts(lv$level_m, seasonal.periods=c(96,35064))
report_model <- auto.arima(report, seasonal=FALSE, xreg=fourier(report, K=c(10,2)))
plot(forecast(report_model, h=192, xreg=fourier(report, K=c(10,2), h=192)))
checkresiduals(report_model, lag=96)
report <- msts(lv$level_m, seasonal.periods=c(96,35064))
report_model <- auto.arima(report, seasonal=FALSE, xreg=fourier(report, K=c(4,1)))
plot(forecast(report_model, h=192, xreg=fourier(report, K=c(4,1), h=192)))
checkresiduals(report_model, lag=96)
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
test3_model <- auto.arima(test3, seasonal=FALSE, xreg=fourier(report, K=c(10,2)))
plot(forecast(test3_model, h=192, xreg=fourier(test3, K=c(10,2), h=192)))
checkresiduals(test3_model, lag=96)
test3_model$aic
test3_model <- auto.arima(test3, seasonal=FALSE, xreg=fourier(report, K=c(5,2)))
test3_model <- auto.arima(test3, seasonal=FALSE, xreg=fourier(report, K=c(5,2)))
test3_model$aic
plot(forecast(test3_model, h=192, xreg=fourier(test3, K=c(10,2), h=192)))
checkresiduals(test3_model, lag=96)
2+2
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(zoo)
library(tseries)
library(forecast)
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
print('hi')
test_list <- list(Inf)
dim(test_list)
length(test_list)
best_fit <- list(aicc=Inf)
head(best_fit)
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
best_fit <- list(aicc=Inf)
for (i in 1:6){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(i, 2))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
best_fit <- list(aicc=Inf)
for (i in 1:6){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i, 2)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
best_fit
plot(forecast(best_fit, xreg=fourier(test3, K=c(5,2), h=192)))
plot(forecast(best_fit, xreg=fourier(test3, K=c(2), h=192)))
plot(forecast(best_fit, xreg=fourier(test3, K=c(5,2), h=192)))
plot(forecast(best_fit, h=192, xreg=fourier(test3, K=c(5,2), h=192)))
plot(forecast(best_fit, xreg=fourier(test3, K=c(4,2), h=192)))
plot(forecast(best_fit, xreg=fourier(test3, K=c(1,2), h=192)))
plot(forecast(best_fit, xreg=fourier(test3, K=1, h=192)))
plot(forecast(best_fit, xreg=fourier(test3, K=c(1,1), h=192)))
plot(forecast(best_fit, xreg=fourier(test3, K=c(6,1), h=192)))
test2 <- ts(diff(lv$level_m, lag=96), frequency=96)
test2_model <- auto.arima(test2, seasonal=FALSE, xreg=fourier(test2, K=4))
plot(forecast(test2_model, h=192, xreg=fourier(test2, K=4, h=192)))
checkresiduals(test2_model)
test4 <- msts(lv$level_m, seasonal.periods=c(96,35064))
test4_model <- auto.arima(test4, seasonal=FALSE, xreg=fourier(test4, K=c(4,1)))
plot(forecast(test4_model, h=192, xreg=fourier(test4, K=c(4,1), h=192)))
checkresiduals(test4_model, lag=96)
test4_model
best_fit
checkresiduals(test4_model, lag=96)
plot(forecast(test4_model, xreg=fourier(test4, K=c(4,1), h=192)))
checkresiduals(test4_model, lag=96)
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(6,1), h=192))
test4_model <- auto.arima(test4, seasonal=FALSE, xreg=fourier(test4, K=c(5,1)))
test4_model <- auto.arima(test4, seasonal=FALSE, xreg=fourier(test4, K=c(5,1)))
plot(forecast(test4_model, xreg=fourier(test4, K=c(4,1), h=192)))
?fourier
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(6,2), h=192))
checkresiduals(test3_model, lag=96)
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(4,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(2,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(6,2), h=192))
autoplot(plotter)
checkresiduals(test3_model, lag=96)
checkresiduals(best_fit, lag=96)
best_fit$aic
test4_model$aicc
best_fit$aicc
test4_model$aic
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
best_fit <- list(aicc=Inf)
for (i in 1:6){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(6, i)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
best_fit$aicc
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(6,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(6,2), h=192))
autoplot(plotter)
checkresiduals(best_fit, lag=96)
best_fit$aicc
best_fit <- list(aicc=Inf)
for (i in 7:12){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,2)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
best_fit$aicc
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(7,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(8,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(9,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
autoplot(plotter)
best_fit$aicc
checkresiduals(best_fit, lag=96)
best_fit <- list(aicc=Inf)
for (i in 10:20){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,2)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
best_fit$aicc
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(11,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
autoplot(plotter)
checkresiduals(best_fit, lag=96)
best_fit <- list(aicc=Inf)
for (i in 2:15){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(10,i)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
best_fit$aicc
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,5), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
autoplot(plotter)
checkresiduals(best_fit, lag=96)
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(10,i)))
best_fit$aicc
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,1), h=192))
for (i in 1:3){
for (j in 1:2){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
}
best_fit$aicc
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(2,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(2,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,2), h=192))
autoplot(plotter)
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(2,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(2,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(2,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,2), h=192))
best_fit
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
best_fit <- list(aicc=Inf)
for (i in 1:3){
for (j in 1:2){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
}
for (i in 1:3){
for (j in 1:2){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
}
best_fit
plot
best_fit
plot
er <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(1,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(2,1), h=192))
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(3,1), h=192))
autoplot(plotter)
checkresiduals(best_fit, lag=96)
plotter <- forecast(best_fit, xreg=fourier(test3, K=c(10,2), h=192))
?msts
15*24
4*15
4*24
35064/96
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
test_ls <- list(aicc=Inf, i=Inf)
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_list$aicc)
test_ls <- test_ls(aicc= fit$aicc, i=i)
}
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_list$aicc)
test_ls <- test_ls(aicc=fit$aicc, i=i)
}
best_fit <- list(aicc=Inf, i=Inf, j=Inf)
for (i in 1:2){
for (j in 1:2){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
}
best_fit
test_ls <- list(aicc=Inf, i=Inf)
test_ls
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_list$aicc)
test_ls <- test_ls(aicc=fit$aicc, i=i)
else break;
}
test_ls <- list(aicc=Inf, i=Inf)
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_ls$aicc)
test_ls <- test_ls(aicc=fit$aicc, i=i)
else break;
}
test_ls <- list(aicc=Inf, i=Inf)
test_ls$aicc
test_ls <- list(aicc=Inf, i=Inf)
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_ls$aicc)
test_ls <- test_ls(aicc=fit$aicc, i=i)
else break;
}
test_ls
test_ls <- list(aicc=Inf, i=Inf)
test_ls <- test_ls[aicc=2, i=1)
test_ls <- test_ls[aicc=2, i=1]
test_ls <- list(aicc=Inf, i=Inf)
test_ls <- test_ls[aicc=2, i=1]
dim(test_ls)
length(test_ls)
test_ls <- list(aicc=Inf, i=Inf)
test_ls <- list(2, 1)
test_ls
test_ls <- list(aicc=Inf, i=Inf)
test_ls
test_ls <- list(aicc=2, i=1)
test_ls
test_ls <- list(aicc=Inf, i=Inf)
test_ls <- list(aicc=2, i=1)
test_ls
test_ls <- list(aicc=Inf, i=Inf)
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_ls$aicc)
test_ls <- list(aicc=fit$aicc, i=i)
else break;
}
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_ls$aicc)
test_ls <- list(aicc=fit$aicc, i=i)
else break;
}
est_ls
test_ls <- list(aicc=Inf, i=Inf)
for (i in 1:4){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_ls$aicc)
test_ls <- list(aicc=fit$aicc, i=i)
else break;
}
test_ls
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
best_fit <- list(aicc=Inf, i=Inf, j=Inf)
for (i in 1:2){
for (j in 1:2){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(aicc=fit$aicc, i=i, j=j)
else break;
}
}
best_fit
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
best_fit <- list(fit=Inf, aicc=Inf, i=Inf, j=Inf)
for (i in 1:10){
for (j in 1:5){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(fit=fit$fit, aicc=fit$aicc, i=i, j=j)
else break;
}
}
test_ls <- list(arima_params=Inf, aicc=Inf, i=Inf)
for (i in 1:2){
fit <- auto.arima(test3, seasonal=F, xreg=fourier(test3, K=c(i,1)))
if (fit$aicc < test_ls$aicc)
test_ls <- list(arima_params=fit$fit, aicc=fit$aicc, i=i)
else break;
}
test_ls
plotter <- forecast(test_ls$arima_params, xreg=fourier(test3, K=c(test_ls$i,2), h=192))
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
best_fit <- list(aicc=Inf)
for (i in 1:2){
for (j in 1:2){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- fit
else break;
}
}
best_fit
test3 <- msts(lv$level_m, seasonal.periods=c(96,35064))
best_fit <- list(params=Inf, aicc=Inf, i=Inf)
for (i in 1:2){
for (j in 1:2){
fit <- auto.arima(test3, seasonal=FALSE, xreg=fourier(test3, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(params=fit, aicc=fit$aicc, i=i)
else break;
}
}
best_fit
best_fit$params$fitted
best_fit$params$model
plotter <- forecast(best_fit$params, xreg=fourier(test3, K=c(best_fit$i,2), h=192))
autoplot(plotter)
checkresiduals(best_fit$params, lag=96)
best_fit <- list(model=Inf, aicc=Inf, i=Inf, j=Inf)
arima_param <- function(ts){
best_fit <- list(model=Inf, aicc=Inf, i=Inf, j=Inf)
for (i in 1:10){
for (j in 1:5){
fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(model=fit, aicc=fit$aicc, i=i, j=j)
else break;
}
}
}
arima_param <- function(ts){
best_fit <- list(model=Inf, aicc=Inf, i=Inf, j=Inf)
for (i in 1:2){
for (j in 1:2){
fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(model=fit, aicc=fit$aicc, i=i, j=j)
else break;
}
}
}
arima_param(test3)
a <- arima_param(test3)
plot(a)
arima_param <- function(ts){
best_fit <- list(model=Inf, aicc=Inf, i=Inf, j=Inf)
for (i in 1:2){
for (j in 1:2){
fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(model=fit, aicc=fit$aicc, i=i, j=j)
else break;
}
}
return(best_fit)
}
a <- arima_param(test3)
a <- arima_param(test3)
plot(a)
a$model
knitr::opts_chunk$set(echo = TRUE)
lv_ts <- msts(lv$level_m, seasonal.periods=c(96,35064))
arima_param <- function(ts){
best_fit <- list(model=Inf, aicc=Inf, i=Inf, j=Inf)
for (i in 1:2){
for (j in 1:2){
fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(model=fit, aicc=fit$aicc, i=i, j=j)
else break;
}
}
return(best_fit)
}
arima_model <- arima_param(lv_ts)
plotter <- forecast(arima_model$model, xreg=fourier(lv_ts, K=c(arima_model$i, arima_model$j), h=192))
autoplot(plotter)
checkresiduals(arima_model, lag=96)
checkresiduals(arima_model$model, lag=96)
