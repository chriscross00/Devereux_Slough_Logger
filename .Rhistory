<<<<<<< HEAD
checkresiduals(test3_model, lag=96)
2+2
=======
ggplot(df_lv, aes(date_time, level_m)) +
geom_line() +
xlab('Date') +
ylab('Level (m)') +
ggtitle('Water level (m) over time')
ggplot(df_lv, aes(date_time, level_m)) +
geom_line() +
geom_smooth(method = 'loess', se = FALSE) +
xlab('Date') +
ylab('Level (m)') +
ggtitle('Water level (m) over time w/ trend line')
ts <- ts(df_lv$level_m, frequency = 96)
decomp_ts <- stl(ts, s.window='period')
plot(decomp_ts)
grid.arrange(ggAcf(lv$level_m), ggPacf(lv$level_m), nrow=2)
df_lv$level_m %>%
diff(lag=96) %>%
ggtsdisplay(xlab='Sample',
main='Seasonal differenced water level')
lv_diff <- df_lv$level_m %>%
diff(lag=96) %>%
diff() %>%
ggtsdisplay(xlab='Sample',
main='Seasonally differenced diff(1) water level')
head(lv_diff)
lv_diff <- df_lv$level_m %>%
diff(lag=96) %>%
diff()
head(lv_diff)
ggtsdisplay(lv_diff, xlab='Sample',
main='Seasonally differenced diff(1) water level')
lv_diff <- lv_diff %>%
mutate(date_time = lv_df$date_time)
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_df <- lv[c(2,5)]
ggplot(lv_df, aes(date_time, level_m)) +
geom_line() +
xlab('Date') +
ylab('Level (m)') +
ggtitle('Water level (m) over time')
ts <- ts(lv_df$level_m, frequency = 96)
decomp_ts <- stl(ts, s.window='period')
plot(decomp_ts)
lv_df$level_m %>%
diff(lag=96) %>%
ggtsdisplay(xlab='Sample',
main='Seasonal differenced water level')
head(lv_df$date_time)
lv_diff <- lv_diff %>%
mutate(date_time = lv_df$date_time)
lv_diff$date_time <- lv_df$date_time
head(lv_df)
head(lv_diff)
lv_diff <- lv_df$level_m %>%
diff(lag=96) %>%
diff()
lv_df$test <- lv_diff
lv_zoo <- zoo(lv$level_m, order.by = lv$date_time)
str(lv_zoo)
test1 <- diff(lv_zoo)
head(test1)
test1 %>% diff(lag=96) %>%
diff()
test1 %>% diff(lag=96) %>%
diff() %>%
ggtsdisplay(lv_diff, xlab='Sample',
main='Seasonally differenced diff(1) water level')
test1 %>% diff(lag=96) %>%
diff() %>%
ggtsdisplay(lv_diff, xlab='Sample',
main='Seasonally differenced diff(1) water level')
test5 <- test1 %>% diff(lag=96) %>%
diff()
head(test5)
test5 <- test1 %>% diff(lag=96) %>%
diff()
length(test5)
ggtsdisplay(lv_diff, xlab='Sample',
main='Seasonally differenced diff(1) water level')
length(lv)
size(lv)
dim(lv)
View(test5)
View(lv)
test5 <- test1 %>% diff(lag=96) %>%
diff() %>%
ggtsdisplay(xlab='Sample',
main='Seasonally differenced diff(1) water level')
lv_zoo <- zoo(lv$level_m, order.by = lv$date_time)
str(lv_zoo)
test1 <- diff(lv_zoo)
test5 <- test1 %>% diff(lag=96) %>%
diff() %>%
ggtsdisplay(xlab='Sample',
main='Seasonally differenced diff(1) water level')
lv_zoo <- zoo(lv$level_m, order.by = lv$date_time)
str(lv_zoo)
test1 <- diff(lv_zoo)
test5 <- lv_zoo %>% diff(lag=96) %>%
diff() %>%
ggtsdisplay(xlab='Sample',
main='Seasonally differenced diff(1) water level')
library(tidyverse)
library(gridExtra)
library(here)
library(zoo)
library(tseries)
library(forecast)
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_zoo <- zoo(lv$level_m, order.by = lv$date_time)
str(lv_zoo)
lv_df <- lv[c(2,5)]
cat('Absolute difference in water level over the period of', as.character(start(lv_zoo)), 'and', as.character(end(lv_zoo)), 'in meters:', max(lv_df) - min(lv_df))
head(lv_df)
lv_df <- lv[c(2,5)]
cat('Absolute difference in water level over the period of', as.character(start(lv_df)), 'and', as.character(end(lv_df)), 'in meters:', max(lv_df) - min(lv_df))
start(lv_zoo)
end(lv_zoo)
lv_df <- lv[c(2,5)]
cat('Absolute difference in water level over the period of', as.character(start(lv_zoo)), 'and', as.character(end(lv_zoo)), 'in meters:', max(lv_df) - min(lv_df))
max(lv_df)
max(lv_df$level_m)
lv_df <- lv[c(2,5)]
cat('Absolute difference in water level over the period of', as.character(start(lv_zoo)), 'and', as.character(end(lv_zoo)), 'in meters:', max(lv_df$level_m) - min(lv_df$level_m))
ggplot(lv_df, aes(date_time, level_m)) +
geom_line() +
xlab('Date') +
ylab('Level (m)') +
ggtitle('Water level (m) over time')
ggplot(lv_df, aes(date_time, level_m)) +
geom_line() +
geom_smooth(method = 'loess', se = FALSE) +
xlab('Date') +
ylab('Level (m)') +
ggtitle('Water level (m) over time w/ trend line')
ts <- ts(lv_df$level_m, frequency = 96)
decomp_ts <- stl(ts, s.window='period')
plot(decomp_ts)
grid.arrange(ggAcf(lv_zoo), ggPacf(lv_zoo), nrow=2)
lv_zoo %>%
diff(lag=96) %>%
ggtsdisplay(xlab='Sample',
main='Seasonal differenced water level')
lv_diff <- lv_zoo %>%
diff(lag=96) %>%
diff() %>%
ggtsdisplay(xlab='Sample',
main='Seasonally differenced diff(1) water level')
plot(lv_diff, type='l')
ggAcf(lv_diff, lag.max = 200)
ggAcf(lv_diff, lag.max = 200)
head(lv_diff)
lv_diff <- lv_zoo %>%
diff(lag=96) %>%
diff()
ggtsdisplay(lv_diff, xlab='Sample',
main='Seasonally differenced diff(1) water level')
plot(lv_diff, type='l')
ggAcf(lv_diff, lag.max = 200)
ggPacf(lv_diff)
model_diff <- auto.arima(lv_diff, approximation=FALSE, trace=FALSE)
model_diff <- auto.arima(lv_diff, approximation=FALSE, trace=FALSE)
summary(model_diff)
checkresiduals(model_diff)
checkresiduals(own_model)
autoplot(forecast(model_diff))
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,1)) %>%
forecast() %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,1), lambda=0) %>%
forecast() %>%
autoplot()
?forecast
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,1), lambda=0) %>%
forecast(h=1000) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,0), lambda=0) %>%
forecast(h=1000) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,0), lambda=0) %>%
forecast(h=100) %>%
autoplot()
>>>>>>> 56c79d7886ecdeef22ccdbd7b301e011761396db
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(zoo)
library(tseries)
library(forecast)
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_zoo <- zoo(lv$level_m, order.by = lv$date_time)
str(lv_zoo)
lv_df <- lv[c(2,5)]
cat('Absolute difference in water level over the period of', as.character(start(lv_zoo)), 'and', as.character(end(lv_zoo)), 'in meters:', max(lv_df$level_m) - min(lv_df$level_m))
model_diff <- auto.arima(lv_diff, approximation=FALSE, trace=FALSE)
lv_diff <- lv_zoo %>%
diff(lag=96) %>%
diff()
ggtsdisplay(lv_diff, xlab='Sample',
main='Seasonally differenced diff(1) water level')
model_diff <- auto.arima(lv_diff, approximation=FALSE, trace=FALSE)
summary(model_diff)
checkresiduals(model_diff)
autoplot(forecast(model_diff))
checkresiduals(model_diff)
autoplot(forecast(model_diff, h=1000))
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,1), lambda=0) %>%
forecast(h=1000) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(4,1,1), lambda=0) %>%
forecast(h=1000) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,2), lambda=0) %>%
forecast(h=1000) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,2), lambda=0) %>%
forecast(h=500) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,0,3), seasonal=c(0,1,2), lambda=0) %>%
forecast(h=500) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,2), seasonal=c(0,1,2), lambda=0) %>%
forecast(h=500) %>%
autoplot()
lv_zoo %>%
Arima(order=c(201,2), seasonal=c(0,1,2), lambda=0) %>%
forecast(h=500) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,2), seasonal=c(0,1,2), lambda=0) %>%
forecast(h=500) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,2), seasonal=c(0,1,2), lambda=96) %>%
forecast(h=500) %>%
autoplot()
lv_zoo %>%
Arima(order=c(2,1,2), seasonal=c(0,1,2)) %>%
forecast(h=500) %>%
autoplot()
lv_diff <- lv_zoo %>%
diff(lag=96)
ggtsdisplay(lv_diff, xlab='Sample',
main='Seasonally differenced diff(1) water level')
model_diff <- auto.arima(lv_diff, approximation=FALSE, trace=FALSE)
summary(model_diff)
checkresiduals(model_diff)
autoplot(forecast(model_diff, h=1000))
lv_zoo %>%
Arima(order=c(2,1,3), seasonal=c(0,1,0)) %>%
forecast(h=500) %>%
autoplot()
knitr::opts_chunk$set(echo = TRUE)
here()
data <- read_csv('Tractor-Sales.csv')
data_ts <- ts(data[,2], start=c(2003, 1), frequency=12)
plot(data_ts)
View(data)
forecast(model_diff, h=50)
head(lv_diff)
?zooreg
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_zoo <- zoo(lv$level_m, order.by = lv$date_time)
str(lv_zoo)
lv_ts <- ts(lv$level_m, frequency=96)
plot(lv_ts)
head(lv_ts)
lv_ts <- ts(lv$level_m, start=c(2018, 02, 12), frequency=96)
head(lv_ts)
plot(lv_ts)
lv_ts <- ts(lv$level_m, start=c(2018, 02, 12, 12, 00, 00), frequency=96)
head(lv_ts)
plot(lv_ts)
lv_ts <- ts(lv$level_m, start=c(2018, 02, 12), frequency=96)
head(lv_ts)
plot(lv_ts)
head(lv_ts)
tail(lv)
length(lv_ts)
24*15
24*4
lv_ts <- ts(lv$level_m, start=c(2018, 02, 12), frequency=96)
head(lv_ts)
plot(lv_ts)
auto.arima(lv_ts, approximation=FALSE, trace=FALSE)
2+@
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(zoo)
library(tseries)
library(forecast)
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_zoo <- zoo(lv$level_m, order.by = lv$date_time)
str(lv_zoo)
lv_ts <- ts(lv$level_m, start=c(02, 12), frequency=96)
head(lv_ts)
plot(lv_ts)
# AR(4)
test4 <- arima(lv_ts, order=c(4,1,0))
test4_pred <- predict(test4, n.ahead=200)
plot(lv_ts)
lines(test4_pred$pred, col='blue')
# AR(4)
test4 <- arima(lv_ts, order=c(4,1,0))
test4_pred <- predict(test4, n.ahead=700)
plot(lv_ts)
lines(test4_pred$pred, col='blue')
# AR(4)
test4 <- arima(lv_ts, order=c(4,1,0))
test4_pred <- predict(test4, n.ahead=1)
plot(lv_ts)
lines(test4_pred$pred, col='blue')
# AR(4)
test4 <- arima(lv_ts, order=c(4,1,0))
test4_pred <- predict(test4, n.ahead=2000)
plot(lv_ts)
lines(test4_pred$pred, col='blue')
auto.arima(lv_ts, seasonal=T)
print(ts(lv$level_m, start=c(02, 12), frequency=365.25), calendar=T)
print(ts(lv$level_m, start=c(2018, 02, 12), frequency=365.25), calendar=T)
lv_ts <- ts(lv$level_m, frequency=365.25)
lv_ts <- ts(lv$level_m, frequency=365.25)
head(lv_ts)
plot(lv_ts)
lv_ts <- ts(lv$level_m, frequency=96)
head(lv_ts)
plot(lv_ts)
head(lv)
tail(lv)
lv_ts <- ts(lv$level_m, frequency=12)
head(lv_ts)
plot(lv_ts)
auto.arima(lv_ts, seasonal=T)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
n <- 2000
m <- 200
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
?Arima
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(fit)
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
plot(y)
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
predict(fit, n.ahead=200)
predict(fit, n.ahead=200)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(forecast)
n <- 2000
m <- 200
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
plot(y)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
fit <- auto.arima(y, seasonal=FALSE, xreg=fourier(y, K=4))
plot(fit)
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
auto_fit <- auto.arima(y, seasonal=FALSE, xreg=fourier(y, K=4))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
?Arima
n <- 2000
m <- 400
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
n <- 2000
m <- 100
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
n <- 2000
m <- 1000
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
n <- 2000
m <- 300
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
n <- 2000
m <- 200
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
n <- 2000
m <- 50
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
n <- 2000
m <- 200
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(here)
library(zoo)
library(tseries)
library(forecast)
here()
lv <- read_csv('180301 Level Data copy.csv')
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_ts <- ts(lv$level_m, frequency=12)
head(lv_ts)
plot(lv_ts)
lv_ts <- ts(lv$level_m, frequency=96)
head(lv_ts)
plot(lv_ts)
lv_df <- lv[c(2,5)]
<<<<<<< HEAD
cat('Absolute difference in water level over the period of', as.character(min(lv_df$date_time)), 'and', as.character(min(lv_df$date_time)), 'in meters:', max(lv_df$level_m) - min(lv_df$level_m))
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value,
'p-value from adf.test() of seasonally differenced lv_df:', lv_diff_adf$p.value)
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value, \n
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value,
'\np-value from adf.test() of seasonally differenced lv_df:', lv_diff_adf$p.value)
knitr::opts_chunk$set(echo = TRUE)
for (i in 1:10){
for (j in 1:5){
fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(model=fit, aicc=fit$aicc, i=i, j=j)
else break;
}
}
library(tidyverse)
library(here)
library(forecast)
library(tseries)
here()
lv <- read_csv('data/180301 Level Data.csv')
head(lv, n=5)
lv$date_time <- as.POSIXct(lv$date_time, format = '%m/%d/%y %H:%M')
lv_df <- lv[c(2,5)]
cat('Absolute difference in water level over the period of', as.character(min(lv_df$date_time)), 'and', as.character(min(lv_df$date_time)), 'in meters:', max(lv_df$level_m) - min(lv_df$level_m))
ggplot(lv_df, aes(date_time, level_m)) +
geom_line() +
geom_smooth(method = 'loess', se = FALSE) +
xlab('Date') +
ylab('Level (m)') +
ggtitle('Water level (m) over time')
decomp_ts <- ts(lv_df$level_m, frequency = 96) %>%
stl(s.window='periodic') %>%
plot(main='Decomposition of level_m')
ggtsdisplay(lv_df$level_m, main='ACF and PACF of level_m')
ggtsdisplay(diff(lv_df$level_m, lag=96), main='ACF and PACF of diff(level_m)')
lv_adf <- adf.test(lv_df$level_m, k=96)
lv_diff_adf <- adf.test(diff(lv_df$level_m, lag=96), k=96)
cat('p-value from adf.test() of lv_df:', lv_adf$p.value,
'\np-value from adf.test() of seasonally differenced lv_df:', lv_diff_adf$p.value)
lv_ts <- msts(lv$level_m, seasonal.periods=c(96,35064))
arima_param <- function(ts){
# Performs a grid search for optimal ARIMA parameters by comparing aicc of each model
#
# Return: The model and fourier transform with the lowest aicc
best_fit <- list(model=Inf, aicc=Inf, i=Inf, j=Inf)
for (i in 1:10){
for (j in 1:5){
fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
if (fit$aicc < best_fit$aicc)
best_fit <- list(model=fit, aicc=fit$aicc, i=i, j=j)
else break;
}
}
return(best_fit)
}
?fourier
?auto.arima()
install.packages("plotly")
?checkresiduals
arima_param <- function(ts){
# Performs a grid search for optimal ARIMA parameters by comparing aicc of each model
#
# Return: The model and fourier transform with the lowest aicc
best_fit <- list(model=Inf, aic=Inf, i=Inf, j=Inf)
for (i in 1:10){
for (j in 1:5){
fit <- auto.arima(ts, seasonal=FALSE, xreg=fourier(ts, K=c(i,j)))
if (fit$aic < best_fit$aic)
best_fit <- list(model=fit, aicc=fit$aic, i=i, j=j)
else break;
}
}
return(best_fit)
}
arima_model <- arima_param(lv_ts)
plotter <- forecast(arima_model$model, xreg=fourier(lv_ts, K=c(arima_model$i, arima_model$j), h=192))
autoplot(plotter)
checkresiduals(arima_model$model, lag=96)
checkresiduals(arima_model$model)
checkresiduals(arima_model$model, lag=96)
96*2
+96
192+96
plotter
[Normalizing the data] (#clean)
3. [EDA] (#eda)
4. [Creating the model] (#model)
5. [Validating the model] (#validate)
6. [Forecasting] (#forecast)
7. [Conclusion] (#analysis)
gg
]
checkresiduals(arima_model$model, lag=96)
=======
cat('Absolute difference in water level over the period of', as.character(start(lv_zoo)), 'and', as.character(end(lv_zoo)), 'in meters:', max(lv_df$level_m) - min(lv_df$level_m))
lv_df <- lv[c(2,5)]
head(y)
head(lv_ts)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=4))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=4, h=2*m)), grid(nx=20))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
grid(nx=20)
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=4, h=2*m)))
grid(nx=20)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=96))
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=2))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=2, h=2*m)))
grid(nx=20)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=10))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=10, h=2*m)))
grid(nx=20)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=2))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=2, h=2*m)))
grid(nx=20)
?fourier
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=12))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=12, h=8*m)))
grid(nx=20)
auto_fit
96*2
lv_ts <- ts(lv$level_m, frequency=192)
head(lv_ts)
plot(lv_ts)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=6))
plot(forecast(auto_fit, h=2*m, xreg=fourier(y, K=12, h=2*m)))
plot(forecast(auto_fit, h=2*m, xreg=fourier(auto_fit, K=12, h=2*m)))
grid(nx=20)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=6))
plot(forecast(auto_fit, h=2*m, xreg=fourier(auto_fit, K=6, h=2*m)))
lv_ts <- ts(lv$level_m, frequency=96)
head(lv_ts)
plot(lv_ts)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=6))
auto_fit
plot(forecast(auto_fit, h=2*m, xreg=fourier(auto_fit, K=6, h=2*m)))
plot(forecast(auto_fit, h=2, xreg=fourier(auto_fit, K=6, h=2)))
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=2))
auto_fit
plot(forecast(auto_fit, h=2, xreg=fourier(auto_fit, K=2, h=2)))
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=1))
auto_fit
plot(forecast(auto_fit, h=2, xreg=fourier(auto_fit, K=1, h=2)))
plot(y)
2000%%100
(1:2000)%%100
lv_ts <- ts(lv$level_m, f=96)
head(lv_ts)
plot(lv_ts)
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=1))
auto_fit
plot(forecast(auto_fit, h=2, xreg=fourier(auto_fit, K=1, h=2)))
365/96/7
taylor
plot(taylor)
17532*2
lv_ts_wk <- msts(lv$level_m, seasonal.periods=c(96,35064))
head(lv_ts_wk)
plot(lv_ts_wk)
auto_fit <- auto.arima(lv_ts_wk, seasonal=FALSE, xreg=fourier(lv_ts_wk, K=4))
auto_fit <- auto.arima(lv_ts_wk, seasonal=FALSE, xreg=fourier(lv_ts_wk, K=c(4,1)))
plot(forecast(auto_fit, h=192, xreg=fourier(lv_ts_wk, K=c(4,1), h=192)))
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=4))
auto_fit
plot(forecast(auto_fit, h=192, xreg=fourier(auto_fit, K=4, h=192)))
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=0.5))
auto_fit <- auto.arima(lv_ts, seasonal=FALSE, xreg=fourier(lv_ts, K=1))
auto_fit
plot(forecast(auto_fit, h=192, xreg=fourier(auto_fit, K=1, h=192)))
>>>>>>> 56c79d7886ecdeef22ccdbd7b301e011761396db
